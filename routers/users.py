"""User related endpoints."""

import string
import random
from typing import List
from datetime import datetime, timedelta
from fastapi import APIRouter, Security, Query

from .auth import get_current_user
from models.user import (
    UserOut,
    UserIn,
    User,
    SecurityScopes,
    UserDB,
    UserUpdate,
    UserDelete,
    TokenDelete,
)
from utils.db_connector import DBConnector, Collections


router = APIRouter()
connector = DBConnector()

SECRET_KEY = "JWT_SECRET"
ALGORITHM = "JWT_ALGORITHM"


@router.get("/users", description="Get list of users.", tags=["Users"])
async def get_users(
    user: User = Security(get_current_user, scopes=["admin"])
) -> List[UserOut]:
    """List users."""
    return [
        UserOut(**user)
        for user in connector.collection(Collections.USERS).find(
            {"scopes": {"$nin": [SecurityScopes.admin]}}
        )
    ]

@router.post(
    "/users",
    description="Create new user.",
    tags=["Users"],
    response_model=UserOut,
)
async def post_user(
    user: UserIn,
    loggedin_user: User = Security(get_current_user, scopes=["admin"]),
) -> UserOut:
    """Create user."""
    connector.collection(Collections.USERS).insert_one(
        UserDB(**user.dict()).dict()
    )
    print(
        f"User {user.username} created with {', '.join(user.scopes)} scope(s)."
    )
    return user


@router.patch(
    "/users",
    description="Update existing user.",
    tags=["Users"],
    response_model=UserOut,
)
async def patch_user(
    user: UserUpdate,
    loggedin_user: User = Security(get_current_user, scopes=["admin"]),
) -> UserOut:
    """Create user."""
    connector.collection(Collections.USERS).update_one(
        {"username": user.username},
        {"$set": {k: v for k, v in user.dict().items() if v is not None}},
    )
    if user.password is not None:
        print(
            f"Password updated for user {user.username} with scope(s) {', '.join(user.scopes)}."
        )
    else:
        print(
            f"User {user.username} updated with scopes(s) {', '.join(user.scopes)}."
        )
    return connector.collection(Collections.USERS).find_one(
        {"username": user.username}
    )


@router.delete("/users", description="Delete a user.", tags=["Users"])
async def delete_user(
    user: UserDelete,
    loggedin_user: User = Security(get_current_user, scopes=["admin"]),
):
    """Delete a user."""
    connector.collection(Collections.USERS).delete_one(
        {"username": user.username}
    )
    print(f"User {user.username} is deleted.")
    return {}


@router.get(
    "/users/tokens", description="List user's auth tokens.", tags=["Users"]
)
async def list_auth_tokens(
    user: User = Security(get_current_user, scopes=["me"]),
) -> List[UserOut]:
    """Generate new authentication token."""
    return connector.collection(Collections.USERS).find_one(
        {"username": user.username}
    )["tokens"]


@router.post(
    "/users/tokens", description="Request a new auth token.", tags=["Users"]
)
async def create_auth_token(
    description: str = Query(..., min_length=1),
    expire_after: int = Query(60),
    user: User = Security(get_current_user, scopes=["me", "api"]),
) -> List[UserOut]:
    """Generate new authentication token."""
    if expire_after >= 0:
        expires_at = datetime.utcnow() + timedelta(minutes=expire_after)
    else:
        expires_at = None
    token = {
        "client_id": "".join(
            random.choices(string.ascii_lowercase + string.digits, k=32)
        ),
        "client_secret": "".join(
            random.choices(string.ascii_lowercase + string.digits, k=64)
        ),
        "description": description,
        "expiresAt": expires_at,
    }
    # store the token for revoking in future
    connector.collection(Collections.USERS).update_one(
        {"username": user.username}, {"$push": {"tokens": token}}
    )
    print(f"New client id generated by user {user.username}.")
    return token


@router.delete(
    "/users/tokens", description="Revoke an auth token.", tags=["Users"]
)
async def delete_auth_token(
    token: TokenDelete,
    user: User = Security(get_current_user, scopes=["me"]),
) -> List[UserOut]:
    """Generate new authentication token."""
    connector.collection(Collections.USERS).update_one(
        {"username": user.username},
        {"$pull": {"tokens": {"client_id": token.client_id}}},
    )
    print(
        f"An authentication token has been revoked by user {user.username}."
    )
    return {}
